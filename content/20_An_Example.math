::
# An Example
::

::
```math
[\integer]
Defines: n
means: "$n$ is one of $\ldots, -1, 0, 1, \ldots$"
written: "\textrm{integer}"
called: "integer"
```
::


[\integer]
Defines: n
means: "$n$ is one of $\ldots, -1, 0, 1, \ldots$"
written: "\textrm{integer}"
called: "integer"


::
```math
[a \integer.*/ b]
Defines: c
when: 'a, b is \integer'
means: "$c$ is the product of $a$ and $b$"
written: "a? b?"
called: "product of $a?$ and $b?$"
```
::


[a \integer.*/ b]
Defines: c
when: 'a, b is \integer'
means: "$c$ is the product of $a$ and $b$"
written: "a? b?"
called: "product of $a?$ and $b?$"


::
```math
[a \integer.>/ b]
States:
that: "$a$ is larger than $b$"
written: "a? > b?"
called: "$a?$ is greater than $b?$"
```
::


[a \integer.>/ b]
States:
that: "$a$ is larger than $b$"
written: "a? > b?"
called: "$a?$ is greater than $b?$"


::
```math
[a \integer.|/ b]
States:
when: 'a, b is \integer'
that:
. exists: d
  suchThat:
  . 'd is \integer'
  . 'b = d*a'
using:
. 'a * b := a \integer.*/ b'
written: "a? | b?"
called: "$a?$ divides $b?$"
```
::


[a \integer.|/ b]
States:
when: 'a, b is \integer'
that:
. exists: d
  suchThat:
  . 'd is \integer'
  . 'b = d*a'
using:
. 'a * b := a \integer.*/ b'
written: "a? | b?"
called: "$a?$ divides $b?$"


::
```math
[\prime]
Defines: p
means:
. 'p is \integer'
. 'p > 1'
. forAll: a, b
  suchThat: 'a, b is \integer'
  then:
  . if: 'p | a \integer.*/ b'
    then:
    . or:
      . 'p | a'
      . 'p | b'
using:
. 'a * b := a \integer.*/ b'
. 'a | b := a \integer.|/ b'
. 'a > b := a \integer.>/ b'
written: "\textrm{prime}"
called: "prime"
```
::


[\prime]
Defines: p
means:
. 'p is \integer'
. 'p > 1'
. forAll: a, b
  suchThat: 'a, b is \integer'
  then:
  . if: 'p | a*b'
    then:
    . or:
      . 'p | a'
      . 'p | b'
using:
. 'a * b := a \integer.*/ b'
. 'a | b := a \integer.|/ b'
. 'a > b := a \integer.>/ b'
written: "\textrm{prime}"
called: "prime"


::
* Describe difference between structure and statement language and say will get to more details later
* Show using text and statement
* Show how rendering works
* Show definition and theorem
* Show how written and called works
::